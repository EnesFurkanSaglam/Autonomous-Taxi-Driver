package org.efs.demo;

import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Uygulama {

    private static final int[][] yonler = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

    static List<int[]> enKisaYoluBul(int[][] harita, int[] baslangic, int[] hedef) {
        Queue<int[]> kuyruk = new LinkedList<>();
        Map<String, String> parentMap = new HashMap<>();
        kuyruk.offer(baslangic);
        parentMap.put(Arrays.toString(baslangic), "");

        while (!kuyruk.isEmpty()) {
            int[] mevcut = kuyruk.poll();
            if (Arrays.equals(mevcut, hedef)) {
                return yolunuYenidenOlustur(parentMap, baslangic, hedef);
            }
            for (int[] yon : yonler) {
                int x = mevcut[0] + yon[0];
                int y = mevcut[1] + yon[1];
                if (x >= 0 && x < harita.length && y >= 0 && y < harita[0].length && harita[x][y] != 3  && !parentMap.containsKey(Arrays.toString(new int[]{x, y}))) {
                    kuyruk.offer(new int[]{x, y});
                    parentMap.put(Arrays.toString(new int[]{x, y}), Arrays.toString(mevcut));
                }
            }
        }
        return new ArrayList<>();
    }

    static List<int[]> yolunuYenidenOlustur(Map<String, String> parentMap, int[] baslangic, int[] hedef) {
        List<int[]> yol = new ArrayList<>();
        int[] mevcut = hedef;
        while (!Arrays.equals(mevcut, baslangic)) {
            yol.add(0, mevcut);
            mevcut = Arrays.stream(parentMap.get(Arrays.toString(mevcut)).replaceAll("[\\[\\]\\s]", "").split(","))
                    .mapToInt(Integer::parseInt)
                    .toArray();
        }
        yol.add(0, baslangic);
        return yol;
    }
}

package org.efs.demo;

import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.util.ArrayList;

import static org.efs.demo.HelloApplication.*;
import static org.efs.demo.HelloApplication.KARE_BOYUTU;


public class Sis implements Cloneable{

    static Sis sis = new Sis("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/sis/",
            "sis.png",0,0);
    static ArrayList<ImageView> sisArrayListImageView = new ArrayList<>();

    public Sis(String imagePath, String ad , int x, int y) {
        this.setAd(ad);
        this.setImagePath(imagePath);
        setX(x);
        setY(y);
    }

        private String ad;
        private String imagePath;
        private int X;
        private int Y;

        public static void Sisle(Group root){
            for (int i = 0;i<KARE_YUKSEKLIK;i++){
                for (int j = 0;j<KARE_GENISLIK;j++){
                    Image imageSis = new Image(sis.getImagePath() + sis.getAd());
                    ImageView imageView = new ImageView(imageSis);
                    imageView.setFitWidth(KARE_BOYUTU);
                    imageView.setFitHeight(KARE_BOYUTU);
                    imageView.setX(i * KARE_BOYUTU);
                    imageView.setY(j * KARE_BOYUTU);

                    sisArrayListImageView.add(imageView);
                    root.getChildren().add(imageView);
                }
            }
        }


    public String getAd() {
        return ad;
    }

    public void setAd(String ad) {
        this.ad = ad;
    }

    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public int getX() {
        return X;
    }

    public void setX(int x) {
        X = x;
    }

    public int getY() {
        return Y;
    }

    public void setY(int y) {
        Y = y;
    }
    protected Engel clone() throws CloneNotSupportedException {
        try {
            return (Engel) super.clone();
        } catch (CloneNotSupportedException e) {
            return null;
        }
    }
}

package org.efs.demo;
import static org.efs.demo.HelloApplication.*;

public class Lokasyon implements Cloneable {

    private int X;
    private int Y;
    static int [][] KORDINATLAR = new int[KARE_YUKSEKLIK][KARE_GENISLIK];

    public void KarakterKordinatYaz(int boy,int genislik,int solUstKordinatX,int solUstKordinatY){

        int x1 = solUstKordinatX- 1;
        int x2 = solUstKordinatX + genislik -2;
        int y1 = solUstKordinatY -1;
        int y2 = solUstKordinatY + boy -2 ;

        for (int i = y1; i <= y2; i++) {
            for (int j = x1; j <= x2; j++) {
                KORDINATLAR[i][j] = 1;
            }
        }
    }

    public void HazineKordinatYaz(int boy,int genislik,int solUstKordinatX,int solUstKordinatY){

        int x1 = solUstKordinatX- 1;
        int x2 = solUstKordinatX + genislik -2;
        int y1 = solUstKordinatY -1;
        int y2 = solUstKordinatY + boy -2 ;

        for (int i = y1; i <= y2; i++) {
            for (int j = x1; j <= x2; j++) {
                KORDINATLAR[i][j] = 0;
            }
        }
    }
    public void HareketliEngelKordinatYaz(int boy, int genislik, int solUstKordinatX, int solUstKordinatY, int hareketBoyutu, String hareketYonu) {

        int x1 = solUstKordinatX - 1;
        int x2 = solUstKordinatX + genislik - 2;
        int y1 = solUstKordinatY - 1;
        int y2 = solUstKordinatY + boy - 2;

        switch (hareketYonu) {

            case "X":

                for (int i = y1; i <= y2; i++) {
                    for (int j = x1; j <= x2; j++) {
                        KORDINATLAR[i][j] = 3;
                        for (int k = 1; k <= hareketBoyutu; k++) {
                            KORDINATLAR[i][j - k] = 3;
                            KORDINATLAR[i][j + k] = 3;


                        }

                    }
                }

                break;
            case "Y":


                for (int i = y1; i <= y2; i++) {
                    for (int j = x1; j <= x2; j++) {
                        KORDINATLAR[i][j] = 3;
                        for (int k = 1; k <= hareketBoyutu; k++) {
                            KORDINATLAR[i - k][j] = 3; // Üstteki hareketli engel
                            KORDINATLAR[i + k][j] = 3; // Altındaki hareketli engel

                        }
                    }
                }
                break;
        }
    }

    public void HareketsizEngelYazKordinatYaz(int boy,int genislik,int solUstKordinatX,int solUstKordinatY) {

        int x1 = solUstKordinatX - 1;
        int x2 = solUstKordinatX + genislik - 2;
        int y1 = solUstKordinatY - 1;
        int y2 = solUstKordinatY + boy - 2;

        for (int i = y1; i <= y2; i++) {
            for (int j = x1; j <= x2; j++) {
                KORDINATLAR[i][j] = 3;
            }
        }
    }

    public void HareketsizEngelKisKordinatYaz(int boy,int genislik,int solUstKordinatX,int solUstKordinatY){

        int x1 = solUstKordinatX- 1;
        int x2 = solUstKordinatX + genislik -2;
        int y1 = solUstKordinatY -1;
        int y2 = solUstKordinatY + boy -2 ;

        for (int i = y1; i <= y2; i++) {
            for (int j = x1; j <= x2; j++) {
                KORDINATLAR[i][j] = 3;
            }
        }
    }
    public void HaritaMatrisYazdir(){

        for (int i = 0;i<KARE_YUKSEKLIK;i++){
            for (int j = 0;j<KARE_GENISLIK;j++){
                System.out.print(KORDINATLAR[i][j]);
            }
            System.out.println();
        }
    }

    public int Kontrol(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4) {

        for (int i = x1; i <= x2; i++) {
            for (int j = y1; j <= y4; j++) {
                if (KORDINATLAR[j][i] != 1) {
                    return -1;
                }
            }
        }
        return 1;
    }

    public void MatrisiBirle(){
        for (int i = 0;i<KARE_YUKSEKLIK;i++){
            for (int j = 0;j<KARE_GENISLIK;j++){
                KORDINATLAR[i][j] = 1;
            }
        }

    }

    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}

package org.efs.demo;
import java.util.ArrayList;

class Kordinat {
    int x;
    int y;
    static ArrayList<Kordinat> kordinatArrayListKarakter = new ArrayList<>();
    static ArrayList<Kordinat> kordinatArrayListHareketliEngel = new ArrayList<>();
    public Kordinat(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

package org.efs.demo;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import static org.efs.demo.Engel.engelArrayList;
import static org.efs.demo.Hazine.*;
import static org.efs.demo.HelloApplication.*;
import static org.efs.demo.HelloApplication.KARE_YUKSEKLIK;
import static org.efs.demo.Kordinat.kordinatArrayListKarakter;
import static org.efs.demo.Sis.sisArrayListImageView;

public class Karakter {

    public Karakter(int ID, String ad, String imagePath, int ilkKonumX, int ilkKonumY,int genislik,int boy) {
        this.setID(ID);
        this.setAd(ad);
        this.setImagePath(imagePath);
        this.setIlkKonumX(ilkKonumX);
        this.setIlkKonumY(ilkKonumY);
        this.genislik = genislik;
        this.boy = boy;
    }

    private int ID;
    private String ad;
    private String imagePath;
    private int boy;
    private int genislik;
    private int ilkKonumX;
    private int ilkKonumY;
    static ImageView imageViewKarakter;

    static Karakter karakter = new Karakter(1,"doblo.png","file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Karakter/",
            0,0,1,1);



    static ArrayList<Hazine> hazineKesfedilen = new ArrayList<>();
    static ArrayList<Engel> engelKesfedilen = new ArrayList<>();





    public static void KarakterOlustur(Lokasyon lokasyon, Group root){

        imageViewKarakter = null;
        hazineKesfedilen.clear();
        engelKesfedilen.clear();



        int kontrol;

            while (true){

                Random random = new Random();

                int engelX;
                int engelY;

                do {

                    engelX = random.nextInt(KARE_GENISLIK);

                } while (!(engelX + karakter.getGenislik() < KARE_GENISLIK));

                do {

                    engelY = random.nextInt(KARE_YUKSEKLIK);

                } while (!(engelY + karakter.getBoy() < KARE_YUKSEKLIK));

                int x1 = engelX;
                int x2 = engelX + karakter.getGenislik() - 1;
                int x3 = engelX + karakter.getGenislik() - 1;
                int x4 = engelX;

                int y1 = engelY;
                int y2 = engelY;
                int y3 = engelY + karakter.getBoy() - 1;
                int y4 = engelY + karakter.getBoy() - 1;

                kontrol = lokasyon.Kontrol(x1, x2, x3, x4, y1, y2, y3, y4); // 1 ise devam -1 ise başa dön

                if (kontrol == 1) {

                    karakter.setIlkKonumX(engelX);
                    karakter.setIlkKonumY(engelY);

                    lokasyon.KarakterKordinatYaz(karakter.getBoy(), karakter.getGenislik()
                            ,karakter.getIlkKonumX() + 1, karakter.getIlkKonumY() + 1);

                    break;
                }
            }

        Image imageKarakter = new Image(karakter.imagePath + karakter.ad);
        imageViewKarakter = new ImageView(imageKarakter);
        imageViewKarakter.setFitWidth(KARE_BOYUTU * karakter.genislik);
        imageViewKarakter.setFitHeight(KARE_BOYUTU * karakter.boy);
        imageViewKarakter.setX(karakter.getIlkKonumX() * KARE_BOYUTU);
        imageViewKarakter.setY(karakter.getIlkKonumY() * KARE_BOYUTU);
        root.getChildren().add(imageViewKarakter);
    }

    public static void karakterHareket() {


        AtomicInteger index = new AtomicInteger(0);
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                Platform.runLater(() -> {
                    Kordinat kordinat = kordinatArrayListKarakter.get(index.get());

                    imageViewKarakter.setX(kordinat.x * KARE_BOYUTU);
                    imageViewKarakter.setY(kordinat.y * KARE_BOYUTU);


                    for (ImageView imageView : sisArrayListImageView){

                        for (int i = kordinat.x - 3; i <= kordinat.x + 3; i++) {

                            for (int j = kordinat.y - 3; j <= kordinat.y + 3; j++) {

                                if ((double) i * KARE_BOYUTU == imageView.getX() && (double) j * KARE_BOYUTU == imageView.getY()) {

                                    imageView.setVisible(false);

                                    for (Engel engel : engelArrayList){

                                        if (engel.getEngelX() == i && engel.getEngelY() == j){

                                            int noktaIndex = engel.getAd().indexOf('.');
                                            String ad = engel.getAd().substring(0, noktaIndex);
                                            ad = ad.toUpperCase();
                                            textBilgiKesfedilen.setText(ad + " KEŞFEDİLDİ");

                                            if (!engelKesfedilen.contains(engel)){
                                                engelKesfedilen.add(engel);
                                            }

                                        }



                                    }

                                    for (Hazine hazine : hazineArrayListYedek){

                                        if (hazine.getX() == i && hazine.getY() == j){
                                            int noktaIndex = hazine.getAd().indexOf('.');
                                            String ad = hazine.getAd().substring(0, noktaIndex);
                                            ad = ad.toUpperCase();

                                            textBilgiKesfedilen.setText(ad + " KEŞFEDİLDİ");

                                            if (!hazineKesfedilen.contains(hazine)){
                                                hazineKesfedilen.add(hazine);
                                            }

                                        }
                                    }

                                }
                            }
                        }
                    }



                    for (Hazine hazine : hazineArrayListYedek){
                        if (hazine.getX() ==kordinat.x && hazine.getY() == kordinat.y){
                            int noktaIndex = hazine.getAd().indexOf('.');
                            String ad = hazine.getAd().substring(0, noktaIndex);
                            ad = ad.toUpperCase();
                            if (!hazineArrayListToplamaSirasi.contains(hazine)){
                                hazineArrayListToplamaSirasi.add(hazine);
                            }
                            textBilgi.setText(ad + " ALINDI");



                            for (ImageView imageView : hazineImageViews){
                                if (imageView.getId().equals(hazine.getAd()) && imageView.getX() == (double)hazine.getX() * KARE_BOYUTU){
                                    imageView.setVisible(false);
                                }
                            }
                        }
                    }


                    gc.setFill(Color.web("#008000"));
                    gc.fillRect(kordinat.x * KARE_BOYUTU, kordinat.y* KARE_BOYUTU, KARE_BOYUTU, KARE_BOYUTU);
                    index.incrementAndGet();

                    if (index.get() >= kordinatArrayListKarakter.size()) {
                        timer.cancel();
                    }
                });
            }
        }, 0, 100);
    }

    public void setID(int ID) {
        this.ID = ID;
    }
    public void setAd(String ad) {
        this.ad = ad;
    }
    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }
    public int getBoy() {
        return boy;
    }
    public int getGenislik() {
        return genislik;
    }
    public int getIlkKonumX() {
        return ilkKonumX;
    }
    public void setIlkKonumX(int ilkKonumX) {
        this.ilkKonumX = ilkKonumX;
    }
    public int getIlkKonumY() {
        return ilkKonumY;
    }
    public void setIlkKonumY(int ilkKonumY) {
        this.ilkKonumY = ilkKonumY;
    }
}

package org.efs.demo;

import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import java.util.*;

import static org.efs.demo.HareketliEngel.*;
import static org.efs.demo.HareketsizEngelKis.KisEngelOlustur;
import static org.efs.demo.HareketsizEngelYaz.YazEngelOlustur;
import static org.efs.demo.Hazine.*;
import static org.efs.demo.Karakter.*;
import static org.efs.demo.Kordinat.kordinatArrayListKarakter;
import static org.efs.demo.Lokasyon.KORDINATLAR;
import static org.efs.demo.Sis.Sisle;
import static org.efs.demo.Uygulama.enKisaYoluBul;


public class HelloApplication extends Application {

    static int GENISLIK = 1000;
    static int YUKSEKLIK = 1000;
    static int KARE_YUKSEKLIK = 50;
    static int KARE_GENISLIK = 50;
    static final int KARE_BOYUTU = GENISLIK / KARE_YUKSEKLIK;
    static GraphicsContext gc;
    Button button1 = new Button("Devam et");
    Button button2 = new Button("Devam et");
    Button button3 = new Button("Oyunu Bitir");
    Button button4Baslat = new Button("Oyunu Başlat");
    Button button5Sifirla = new Button("Haritayı Sıfırla");
    TextField textFieldEngelYaz = new TextField();
    TextField textFieldEngelKis = new TextField();
    TextField textFieldEngelHareketli = new TextField();
    TextField textFieldHazine = new TextField();
    TextField textFieldHaritaXY = new TextField();
    static int engelYazSayisi;
    static int engelKisSayisi;
    static int hareketliEngelSayi;
    static int hazineSayisi;
    static Text textBilgi = new Text("BİLGİ");
    static Text textBilgiKesfedilen = new Text("KEŞFEDİLEN");


    public static void main(String[] args) {
        launch();
    }

    @Override
    public void start(Stage primaryStage) {

        Group group1 = new Group();
        sayfa1(group1, primaryStage);

        button1.setOnAction(actionEventIlk -> {

            Group group2 = new Group();
            sayfa2(group2, primaryStage);

            button2.setOnAction(actionEvent -> {

                KARE_YUKSEKLIK = Integer.parseInt(textFieldHaritaXY.getText());
                KARE_GENISLIK = Integer.parseInt(textFieldHaritaXY.getText());
                engelYazSayisi = Integer.parseInt(textFieldEngelYaz.getText());
                engelKisSayisi = Integer.parseInt(textFieldEngelKis.getText());
                hareketliEngelSayi = Integer.parseInt(textFieldEngelHareketli.getText());
                hazineSayisi = Integer.parseInt(textFieldHazine.getText());

                Group group3 = new Group();
                sayfa3(group3, primaryStage);

                button4Baslat.setOnAction(actionEvent1 -> {


                    Sisle(group3); // Sis kısmını 20*20 de yapacağız fazla sis hata veriyor
                    karakterHareket();
                    hareketEttir();


                });
                button5Sifirla.setOnAction(actionEvent1 -> {

                    hazineArrayListToplamaSirasi.clear();
                    engelArrayList.clear();
                    hazineArrayListYedek.clear();
                    group3.getChildren().clear();
                    sayfa3(group3, primaryStage);

                });
                button3.setOnAction(actionEvent1 -> {
                    Group group4 = new Group();
                    sayfa4(group4,primaryStage);

                });
            });
        });
    }

    private void run() {
        drawBackground(gc);
    }

    private void drawBackground(GraphicsContext gc) {
        for (int i = 0; i < KARE_YUKSEKLIK; i++) {
            for (int j = 0; j < KARE_GENISLIK; j++) {
                if ((i + j) % 2 == 0) {
                    gc.setFill(Color.web("#808080"));
                } else {
                    gc.setFill(Color.web("#ffffff"));
                }
                gc.fillRect(i * KARE_BOYUTU, j * KARE_BOYUTU, KARE_BOYUTU, KARE_BOYUTU);
            }
        }
    }

    private void sayfa1(Group group, Stage primaryStage) {

        primaryStage.setTitle("ANA EKRAN 1");
        Canvas canvas1 = new Canvas(GENISLIK, YUKSEKLIK);

        group.getChildren().add(canvas1);
        Scene scene1 = new Scene(group);
        primaryStage.setScene(scene1);
        primaryStage.show();
        gc = canvas1.getGraphicsContext2D();

        button1.setLayoutX(700);
        button1.setLayoutY(850);
        group.getChildren().add(button1);

        Text text1Ust = new Text("AKASYA DURAĞI");
        text1Ust.setFont(Font.font("Arial", 60));
        text1Ust.setX(250);
        text1Ust.setY(100);
        group.getChildren().add(text1Ust);

        Text text1Alt = new Text(" Hoşgeldin oyuncu. Nasılsın,\n bugün seninle beraber amansız \n bir yolculuğa çıkacağız. Hazır mısın ? \n O zaman BAŞLAAAA ");
        text1Alt.setFont(Font.font("Arial", 18));
        text1Alt.setX(600);
        text1Alt.setY(720);
        group.getChildren().add(text1Alt);

        Image imageUst = new Image("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/AnaEkran/" + "fotoUst.jpg");
        ImageView imageViewUst = new ImageView(imageUst);
        imageViewUst.setFitWidth(799);
        imageViewUst.setFitHeight(444);
        imageViewUst.setX(100);
        imageViewUst.setY(150);
        group.getChildren().add(imageViewUst);

        Image imageAlt = new Image("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/AnaEkran/" + "doblo.png");
        ImageView imageViewAlt = new ImageView(imageAlt);
        imageViewAlt.setX(50);
        imageViewAlt.setY(550);
        group.getChildren().add(imageViewAlt);

    }

    private void sayfa2(Group group, Stage primaryStage) {

        primaryStage.setTitle("ANA EKRAN 2");
        Canvas canvas2 = new Canvas(GENISLIK, YUKSEKLIK);

        group.getChildren().add(canvas2);
        Scene scene2 = new Scene(group);
        primaryStage.setScene(scene2);
        primaryStage.show();
        gc = canvas2.getGraphicsContext2D();

        button2.setLayoutX(700);
        button2.setLayoutY(850);
        group.getChildren().add(button2);

        Image imageAlt = new Image("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/AnaEkran/" + "doblo.png");
        ImageView imageViewAlt = new ImageView(imageAlt);
        imageViewAlt.setX(100);
        imageViewAlt.setY(50);
        group.getChildren().add(imageViewAlt);

        Text textUst = new Text("Tekrar merhaba oyuncu \naşağıyı doldurman lazım\n\nEn iyi deneyim için\nharita boyutunu50*50 seçiniz");
        textUst.setFont(Font.font("Arial", 24));
        textUst.setX(650);
        textUst.setY(250);
        group.getChildren().add(textUst);

        Text textEngelYaz = new Text("Yaz Engel Sayısı:");
        textEngelYaz.setFont(Font.font("Arial", 24));
        textEngelYaz.setX(50);
        textEngelYaz.setY(600);
        group.getChildren().add(textEngelYaz);

        textFieldEngelYaz.setLayoutX(370);
        textFieldEngelYaz.setLayoutY(582);
        group.getChildren().add(textFieldEngelYaz);

        Text textEngelKis = new Text("Kış Engel Sayısı:");
        textEngelKis.setFont(Font.font("Arial", 24));
        textEngelKis.setX(50);
        textEngelKis.setY(650);
        group.getChildren().add(textEngelKis);

        textFieldEngelKis.setLayoutX(370);
        textFieldEngelKis.setLayoutY(632);
        group.getChildren().add(textFieldEngelKis);

        Text textEngelHareketli = new Text("Harketli Engel Sayısı:");
        textEngelHareketli.setFont(Font.font("Arial", 24));
        textEngelHareketli.setX(50);
        textEngelHareketli.setY(700);
        group.getChildren().add(textEngelHareketli);

        textFieldEngelHareketli.setLayoutX(370);
        textFieldEngelHareketli.setLayoutY(682);
        group.getChildren().add(textFieldEngelHareketli);

        Text textHazine = new Text("Kaçar Tane Hazine (4 çeşit) : ");
        textHazine.setFont(Font.font("Arial", 24));
        textHazine.setX(50);
        textHazine.setY(750);
        group.getChildren().add(textHazine);

        textFieldHazine.setLayoutX(370);
        textFieldHazine.setLayoutY(732);
        group.getChildren().add(textFieldHazine);

        Text textHaritaXY = new Text("Harita Boyutu (AxA) A :");
        textHaritaXY.setFont(Font.font("Arial", 24));
        textHaritaXY.setX(50);
        textHaritaXY.setY(800);
        group.getChildren().add(textHaritaXY);

        textFieldHaritaXY.setLayoutX(370);
        textFieldHaritaXY.setLayoutY(782);
        group.getChildren().add(textFieldHaritaXY);
    }

    private void sayfa3(Group root, Stage primaryStage) {

        primaryStage.setTitle("OTONOM HAZİNE AVCISI");
        Canvas canvas = new Canvas(GENISLIK, YUKSEKLIK);
        root.getChildren().add(canvas);

        Scene scene3 = new Scene(new Group(root), GENISLIK, YUKSEKLIK);
        primaryStage.setScene(scene3);
        primaryStage.show();
        gc = canvas.getGraphicsContext2D();
        run();
        Lokasyon lokasyon = new Lokasyon();

        button3.setLayoutX(900);
        button3.setLayoutY(950);
        root.getChildren().add(button3);

        button4Baslat.setLayoutX(20);
        button4Baslat.setLayoutY(20);
        root.getChildren().add(button4Baslat);

        button5Sifirla.setLayoutX(120);
        button5Sifirla.setLayoutY(20);
        root.getChildren().add(button5Sifirla);

        textBilgi.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        textBilgi.setX(800);
        textBilgi.setY(50);
        textBilgi.setFill(Color.BLUE);
        root.getChildren().add(textBilgi);

        textBilgiKesfedilen.setFont(Font.font("Arial", FontWeight.BOLD, 20));
        textBilgiKesfedilen.setX(800);
        textBilgiKesfedilen.setY(100);
        textBilgiKesfedilen.setFill(Color.BLUE);
        root.getChildren().add(textBilgiKesfedilen);

        try {


            HazineOlustur(lokasyon, root);
            hareketliEngelOlustur(lokasyon, root);
            YazEngelOlustur(lokasyon, root);
            KisEngelOlustur(lokasyon, root);

            KarakterOlustur(lokasyon, root);
            lokasyon.HaritaMatrisYazdir();

            kordinatArrayListKarakter.clear();

            while (true) {

                Hazine hazine = enYakinHazineBul();
                if (hazine == null) {
                    System.out.println("Oyun bitti");
                    break;
                } else {

                    int[] start = {karakter.getIlkKonumY(), karakter.getIlkKonumX()};    //  y-x die gircez
                    int[] target = {hazine.getY(), hazine.getX()};   //   y-x die gircez
                    List<int[]> path = enKisaYoluBul(KORDINATLAR, start, target);

                    if (path.size() == 0) {
                        System.out.println("Hedefe ulaşılamadı.");
                    } else {
                        System.out.println("En kısa yol:");
                        for (int[] point : path) {
                            System.out.println(Arrays.toString(point));

                            Kordinat kordinat = new Kordinat(point[1], point[0]);
                            kordinatArrayListKarakter.add(kordinat);
                        }
                    }

                    int[] sonKonum = path.get(path.size() - 1);
                    karakter.setIlkKonumX(sonKonum[1]);
                    karakter.setIlkKonumY(sonKonum[0]);

                }
            }
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        textBilgi.setText("BİLGİ");

    }

    private void sayfa4(Group root, Stage primaryStage) {

        primaryStage.setTitle("ANA EKRAN 4");
        Canvas canvas = new Canvas(GENISLIK, YUKSEKLIK);

        root.getChildren().add(canvas);
        Scene scene1 = new Scene(root);
        primaryStage.setScene(scene1);
        primaryStage.show();

        Text text1Ust = new Text("OYUN BİTTİ");
        text1Ust.setFont(Font.font("Arial", 60));
        text1Ust.setX(300);
        text1Ust.setY(100);
        root.getChildren().add(text1Ust);

        Text textToplanan = new Text("Toplanan Hazineler");
        textToplanan.setFont(Font.font("Arial", 24));
        textToplanan.setX(50);
        textToplanan.setY(200);
        root.getChildren().add(textToplanan);

        ArrayList<Hazine> Altin = new ArrayList<>();
        ArrayList<Hazine> Gumus = new ArrayList<>();
        ArrayList<Hazine> Zumrut = new ArrayList<>();
        ArrayList<Hazine> Bakir = new ArrayList<>();

        Altin.clear();
        Gumus.clear();
        Zumrut.clear();
        Bakir.clear();

        for (Hazine hazine : hazineArrayListYedek){
            if (hazine.getAd().equals("altin.png")){
                Altin.add(hazine);
            }
            if (hazine.getAd().equals("gumus.png")){
                Gumus.add(hazine);
            }
            if (hazine.getAd().equals("zumrut.png")){
                Zumrut.add(hazine);
            }
            if (hazine.getAd().equals("bakir.png")){
                Bakir.add(hazine);
            }
        }

        Text textDeger = new Text("Değer Sırası");
        textDeger.setFont(Font.font("Arial", 16));
        textDeger.setX(40);
        textDeger.setY(230);
        root.getChildren().add(textDeger);

        int a=0;
        for (Hazine hazine : Altin){
            int noktaIndex = hazine.getAd().indexOf('.');
            Text textAltin = new Text(hazine.getAd().substring(0, noktaIndex).toUpperCase()+ " (" + (hazine.getX()+1)+") "+"("+(hazine.getY()+1)+") konumunda bulundu" );
            textAltin.setFont(Font.font("Arial", 10));
            textAltin.setX(40);
            textAltin.setY(250 +a);
            root.getChildren().add(textAltin);
            a+=12;
        }
        a+=15;
        for (Hazine hazine : Gumus){
            int noktaIndex = hazine.getAd().indexOf('.');
            Text textGumus = new Text(hazine.getAd().substring(0, noktaIndex).toUpperCase()+ " (" + (hazine.getX()+1)+") "+"("+(hazine.getY()+1)+") konumunda bulundu" );
            textGumus.setFont(Font.font("Arial", 10));
            textGumus.setX(40);
            textGumus.setY(250 +a);
            root.getChildren().add(textGumus);
            a+=12;
        }
        a+=12;
        for (Hazine hazine : Zumrut){
            int noktaIndex = hazine.getAd().indexOf('.');
            Text textZumrut = new Text(hazine.getAd().substring(0, noktaIndex).toUpperCase()+ " (" + (hazine.getX()+1)+") "+"("+(hazine.getY()+1)+") konumunda bulundu" );
            textZumrut.setFont(Font.font("Arial", 10));
            textZumrut.setX(40);
            textZumrut.setY(250 +a);
            root.getChildren().add(textZumrut);
            a+=12;
        }
        a+=12;
        for (Hazine hazine : Bakir){
            int noktaIndex = hazine.getAd().indexOf('.');
            Text textBakir = new Text(hazine.getAd().substring(0, noktaIndex).toUpperCase()+ " (" + (hazine.getX()+1)+") "+"("+(hazine.getY()+1)+") konumunda bulundu" );
            textBakir.setFont(Font.font("Arial", 10));
            textBakir.setX(40);
            textBakir.setY(250 +a);
            root.getChildren().add(textBakir);
            a+=12;
        }
        a+=30;

        Text textSira = new Text("Toplanan Sıra");
        textSira.setFont(Font.font("Arial", 16));
        textSira.setX(40);
        textSira.setY(250+a);
        root.getChildren().add(textSira);
        a+=20;

        for (Hazine hazine : hazineArrayListToplamaSirasi){
            int noktaIndex = hazine.getAd().indexOf('.');
            Text textSiraHazine = new Text(hazine.getAd().substring(0, noktaIndex).toUpperCase()+ " (" + (hazine.getX()+1)+") "+"("+(hazine.getY()+1)+") konumunda bulundu" );
            textSiraHazine.setFont(Font.font("Arial", 10));
            textSiraHazine.setX(40);
            textSiraHazine.setY(250 +a);
            root.getChildren().add(textSiraHazine);
            a+=12;
        }

        Text textKesfedilen = new Text("Keşfedilenler");
        textKesfedilen.setFont(Font.font("Arial", 24));
        textKesfedilen.setX(380);
        textKesfedilen.setY(200);
        root.getChildren().add(textKesfedilen);

        int k = 0;

        for (Hazine hazine : hazineKesfedilen){
            int noktaIndex = hazine.getAd().indexOf('.');
            String ad = hazine.getAd().substring(0, noktaIndex);
            ad = ad.toUpperCase();
            Text textKesfedilenHazine = new Text(ad+ " (" +(hazine.getX()+1)+") "+ "(" +(hazine.getY()+1)+") konumunda keşfedildi");
            textKesfedilenHazine.setFont(Font.font("Arial", 12));
            textKesfedilenHazine.setX(380);
            textKesfedilenHazine.setY(250 + k);
            root.getChildren().add(textKesfedilenHazine);
            k+=20;
        }

        for (Engel engel : engelKesfedilen){
            int noktaIndex = engel.getAd().indexOf('.');
            String ad = engel.getAd().substring(0, noktaIndex);
            ad = ad.toUpperCase();
            Text textKesfedilenEngel = new Text(ad+ " (" +(engel.getEngelX()+1)+") "+ "(" +(engel.getEngelY()+1)+") konumunda keşfedildi");
            textKesfedilenEngel.setFont(Font.font("Arial", 12));
            textKesfedilenEngel.setX(380);
            textKesfedilenEngel.setY(250 + k);
            root.getChildren().add(textKesfedilenEngel);
            k+=20;
        }




        Text textKordinat = new Text("Gidilen Kordinatlar");
        textKordinat.setFont(Font.font("Arial", 24));
        textKordinat.setX(720);
        textKordinat.setY(200);
        root.getChildren().add(textKordinat);

        int i = 0;
        int j = 0;

        for (Kordinat kordinat : kordinatArrayListKarakter){

            Text textKordinatBilgi = new Text("("+ (kordinat.x+1) + ")" + " (" + (kordinat.y+1) +")  ");
            textKordinatBilgi.setFont(Font.font("Arial", 11));
            textKordinatBilgi.setX(700 + j);
            textKordinatBilgi.setY(250 + i);
            root.getChildren().add(textKordinatBilgi);
            i+=15;
            if (i+250>980){
                i=0;
                j+=50;
            }
        }
    }
}

package org.efs.demo;

import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.efs.demo.HelloApplication.*;
import static org.efs.demo.Karakter.karakter;

public class Hazine  implements Cloneable {

    public Hazine(String imagePath, String ad, int x, int y, int boy, int genislik,double karaktereUzaklik) {
        this.setAd(ad);
        this.setImagePath(imagePath);
        setX(x);
        setY(y);
        setBoy(boy);
        setGenislik(genislik);
        this.karaktereUzaklik = karaktereUzaklik;

    }

    private String ad;
    private String imagePath;
    private int X;
    private int Y;
    private int Boy;
    private int Genislik;
    private double karaktereUzaklik;
    static Hazine altin = new Hazine("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/hazine/",
            "altin.png",0,0,2,2,0);
    static Hazine bakir = new Hazine("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/hazine/",
            "bakir.png",0,0,2,2,0);
    static Hazine gumus = new Hazine("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/hazine/",
            "gumus.png",0,0,2,2,0);
    static Hazine zumrut = new Hazine("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/hazine/",
            "zumrut.png",0,0,2,2,0);


    static Hazine [] hazineler = {altin,bakir,gumus,zumrut};
    static ArrayList<Hazine> hazineArrayList = new ArrayList<>();
    static ArrayList<Hazine> hazineArrayListYedek = new ArrayList<>();
    static List<ImageView> hazineImageViews  = new ArrayList<>();
    static ArrayList<Hazine> hazineArrayListToplamaSirasi = new ArrayList<>();


    public static void HazineOlustur(Lokasyon lokasyon, Group root) throws CloneNotSupportedException{

        root.getChildren().removeAll(hazineImageViews);
        hazineArrayList.clear();
        hazineArrayListYedek.clear();
        hazineImageViews.clear();
        lokasyon.MatrisiBirle();

        int kontrol;

        for (int j = 0;j<hazineSayisi;j++){
            for (int i = 0; i<hazineler.length; i++){

                while (true){

                    Random random = new Random();
                    Hazine yerlestirilecekHazine = (Hazine) hazineler[i].clone();

                    int engelX;
                    int engelY;

                    do {

                        engelX = random.nextInt(KARE_GENISLIK);

                    } while (!(engelX + yerlestirilecekHazine.getGenislik() < KARE_GENISLIK));

                    do {

                        engelY = random.nextInt(KARE_YUKSEKLIK);

                    } while (!(engelY + yerlestirilecekHazine.getGenislik() < KARE_YUKSEKLIK));


                    int x1 = engelX;
                    int x2 = engelX + yerlestirilecekHazine.getGenislik() - 1;
                    int x3 = engelX + yerlestirilecekHazine.getGenislik() - 1;
                    int x4 = engelX;

                    int y1 = engelY;
                    int y2 = engelY;
                    int y3 = engelY + yerlestirilecekHazine.getBoy() - 1;
                    int y4 = engelY + yerlestirilecekHazine.getBoy() - 1;

                    kontrol = lokasyon.Kontrol(x1, x2, x3, x4, y1, y2, y3, y4);  // 1 ise devam -1 ise başa dön

                    if (kontrol == 1) {

                        yerlestirilecekHazine.setX(engelX);
                        yerlestirilecekHazine.setY(engelY);

                        lokasyon.HazineKordinatYaz(yerlestirilecekHazine.getBoy(), yerlestirilecekHazine.getGenislik()
                                ,yerlestirilecekHazine.getX() + 1, yerlestirilecekHazine.getY() + 1);

                        hazineArrayList.add(yerlestirilecekHazine);
                        hazineArrayListYedek.add(yerlestirilecekHazine);

                        break;
                    }

                }
            }
        }


        for (Hazine hazine : hazineArrayList){

            Image imageHazine = new Image(hazine.imagePath + hazine.ad);
            ImageView imageView = new ImageView(imageHazine);
            imageView.setId(hazine.getAd());

            imageView.setFitWidth(KARE_BOYUTU * hazine.Genislik);
            imageView.setFitHeight(KARE_BOYUTU * hazine.Boy);
            imageView.setX(hazine.getX() * KARE_BOYUTU);
            imageView.setY(hazine.getY() * KARE_BOYUTU);


            hazineImageViews.add(imageView);
            root.getChildren().add(imageView);
        }
    }

    public static Hazine enYakinHazineBul() {
        double min = Double.MAX_VALUE;
        Hazine enYakinHazine = null;

        if (!hazineArrayList.isEmpty()) {
            for (Hazine hazine : hazineArrayList) {
                double uzaklik = Math.sqrt(Math.pow(karakter.getIlkKonumX() - hazine.getX(), 2) + Math.pow(karakter.getIlkKonumY() - hazine.getY(), 2));
                if (uzaklik < min) {
                    min = uzaklik;
                    enYakinHazine = hazine;
                }
            }
            hazineArrayList.remove(enYakinHazine);
        }
        return enYakinHazine;
    }


    public String getAd() {
        return ad;
    }

    public void setAd(String ad) {
        this.ad = ad;
    }

    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public int getX() {
        return X;
    }

    public void setX(int x) {
        X = x;
    }

    public int getY() {
        return Y;
    }

    public void setY(int y) {
        Y = y;
    }

    public int getBoy() {
        return Boy;
    }

    public void setBoy(int boy) {
        Boy = boy;
    }

    public int getGenislik() {
        return Genislik;
    }

    public void setGenislik(int genislik) {
        Genislik = genislik;
    }

}

package org.efs.demo;

import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.efs.demo.HelloApplication.*;

public class HareketsizEngelYaz extends HareketsizEngel {

    public HareketsizEngelYaz(String imagePath, String ad, int engelX, int engelY, int engelBoy, int engelGenislik) {
        super(imagePath, ad, engelX, engelY, engelBoy, engelGenislik);
    }

    static Engel agac = new HareketsizEngelYaz("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Yaz Engelleri/",
            "agac.png",-1,-1,5,5);
    static Engel dag = new HareketsizEngelYaz("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Yaz Engelleri/",
            "dag.png",-1,-1,5,5);
    static Engel duvar = new HareketsizEngelYaz("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Yaz Engelleri/",
            "duvar.png",-1,-1,3,3);
    static Engel kaya = new HareketsizEngelYaz("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Yaz Engelleri/",
            "kaya.png",-1,-1,3,3);
    static Engel gunes = new HareketsizEngelYaz("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Yaz Engelleri/",
            "gunes.png",-1,-1,2,2);

    static Engel[] yazEngelleri = {agac,dag,duvar,kaya,gunes};
    static ArrayList<HareketsizEngelYaz> hareketsizEngelYazArrayList = new ArrayList<>();
    static List<ImageView> hareketsizEngelYazImageViews  = new ArrayList<>();

    public static void YazEngelOlustur(Lokasyon lokasyon, Group root) throws CloneNotSupportedException {

        root.getChildren().removeAll(hareketsizEngelYazImageViews);
        hareketsizEngelYazImageViews.clear();
        hareketsizEngelYazArrayList.clear();

        int kontrol;

        for (int i = 0; i<engelKisSayisi;i++){

            while (true){

                int yazEngelSayisi = yazEngelleri.length;
                Random random = new Random();
                int a = random.nextInt(yazEngelSayisi);
                HareketsizEngelYaz yerlestirilecekYazEngeli = (HareketsizEngelYaz) yazEngelleri[a].clone();

                int engelX;
                int engelY;

                do{
                    engelX = random.nextInt(KARE_GENISLIK) + KARE_GENISLIK/2; // indisi veriyor
                }while (!(engelX + yerlestirilecekYazEngeli.getEngelGenislik() < KARE_GENISLIK));

                do{
                    engelY = (int) (Math.random() * KARE_YUKSEKLIK);  // indisi veriyor
                }while (!(engelY < KARE_YUKSEKLIK - yerlestirilecekYazEngeli.getEngelBoy()));

                int x1 = engelX ;
                int x2 = engelX  + yerlestirilecekYazEngeli.getEngelGenislik() - 1;
                int x3 = engelX  + yerlestirilecekYazEngeli.getEngelGenislik() - 1;
                int x4 = engelX ;

                int y1 = engelY ;
                int y2 = engelY ;
                int y3 = engelY + yerlestirilecekYazEngeli.getEngelBoy() -1;
                int y4 = engelY + yerlestirilecekYazEngeli.getEngelBoy() -1;

                kontrol = lokasyon.Kontrol(x1,x2,x3,x4,y1,y2,y3,y4); // 1 ise devam -1 ise başa dön

                if (kontrol == 1){

                    yerlestirilecekYazEngeli.setEngelX(engelX);
                    yerlestirilecekYazEngeli.setEngelY(engelY);

                    lokasyon.HareketsizEngelYazKordinatYaz(yerlestirilecekYazEngeli.getEngelBoy(),yerlestirilecekYazEngeli.getEngelGenislik()
                            ,yerlestirilecekYazEngeli.getEngelX()+1, yerlestirilecekYazEngeli.getEngelY()+1);

                    hareketsizEngelYazArrayList.add(yerlestirilecekYazEngeli);
                    engelArrayList.add(yerlestirilecekYazEngeli);

                    break;
                }
            }
        }


        for (HareketsizEngelYaz hareketsizEngelYaz : hareketsizEngelYazArrayList){

            Image imageYazEngel = new Image(hareketsizEngelYaz.getImagePath() + hareketsizEngelYaz.getAd());
            ImageView imageView = new ImageView(imageYazEngel);
            imageView.setId(hareketsizEngelYaz.getAd());

            imageView.setFitWidth(KARE_BOYUTU * hareketsizEngelYaz.getEngelGenislik());
            imageView.setFitHeight(KARE_BOYUTU * hareketsizEngelYaz.getEngelBoy());
            imageView.setX(hareketsizEngelYaz.getEngelX() * KARE_BOYUTU);
            imageView.setY(hareketsizEngelYaz.getEngelY() * KARE_BOYUTU);

            hareketsizEngelYazImageViews.add(imageView);
            root.getChildren().add(imageView);

        }
    }
}

package org.efs.demo;
import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import static org.efs.demo.HelloApplication.*;
import static org.efs.demo.HelloApplication.KARE_BOYUTU;

public class HareketsizEngelKis extends HareketsizEngel {

    public HareketsizEngelKis(String imagePath, String ad, int engelX, int engelY, int engelBoy, int engelGenislik) {
        super(imagePath, ad, engelX, engelY, engelBoy, engelGenislik);
    }

    static Engel buzdagi = new HareketsizEngelKis("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Kış Engelleri/",
            "buz dagi.png",0,0,6,6);
    static Engel kutupayisi = new HareketsizEngelKis("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Kış Engelleri/",
            "kutup ayisi.png",0,0,5,5);
     static Engel penguen = new HareketsizEngelKis("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Kış Engelleri/",
            "penguen.png",0,0,5,5);
    static Engel kardanadam = new HareketsizEngelKis("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Kış Engelleri/",
            "kardan adam.png",0,0,5,5);
    static Engel buz = new HareketsizEngelKis("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Kış Engelleri/",
            "buz.png",0,0,2,2);

    static Engel[] kisEngelleri = {buzdagi,kutupayisi,penguen,kardanadam,buz};
    static ArrayList<HareketsizEngelKis> hareketsizEngelKisArrayList = new ArrayList<>();
    static List<ImageView> hareketsizEngelKisImageViews  = new ArrayList<>();


    public static void KisEngelOlustur(Lokasyon lokasyon, Group root) throws CloneNotSupportedException {

        root.getChildren().removeAll(hareketsizEngelKisImageViews);
        hareketsizEngelKisImageViews.clear();
        hareketsizEngelKisArrayList.clear();

        int kontrol;

        for (int i = 0;i<engelKisSayisi;i++){

            while (true) {

                int kisEngelSayisi = kisEngelleri.length;
                Random random = new Random();
                int a = random.nextInt(kisEngelSayisi);
                HareketsizEngelKis yerlestirilecekKisEngeli = (HareketsizEngelKis) kisEngelleri[a].clone();

                int engelX;
                int engelY;

                do {
                    engelX = random.nextInt(KARE_GENISLIK / 2);
                } while (!(engelX + yerlestirilecekKisEngeli.getEngelGenislik() < KARE_GENISLIK / 2));

                do {
                    engelY = (int) (Math.random() * KARE_YUKSEKLIK);
                } while (!(engelY < KARE_YUKSEKLIK - yerlestirilecekKisEngeli.getEngelBoy()));

                int x1 = engelX;
                int x2 = engelX + yerlestirilecekKisEngeli.getEngelGenislik() - 1;
                int x3 = engelX + yerlestirilecekKisEngeli.getEngelGenislik() - 1;
                int x4 = engelX;

                int y1 = engelY;
                int y2 = engelY;
                int y3 = engelY + yerlestirilecekKisEngeli.getEngelBoy() - 1;
                int y4 = engelY + yerlestirilecekKisEngeli.getEngelBoy() - 1;

                kontrol = lokasyon.Kontrol(x1, x2, x3, x4, y1, y2, y3, y4); // 1 ise devam -1 ise başa dön

                if (kontrol == 1) {

                    yerlestirilecekKisEngeli.setEngelX(engelX);
                    yerlestirilecekKisEngeli.setEngelY(engelY);

                    lokasyon.HareketsizEngelKisKordinatYaz(yerlestirilecekKisEngeli.getEngelBoy(), yerlestirilecekKisEngeli.getEngelGenislik()
                            ,yerlestirilecekKisEngeli.getEngelX() + 1, yerlestirilecekKisEngeli.getEngelY() + 1);

                    hareketsizEngelKisArrayList.add(yerlestirilecekKisEngeli);
                    engelArrayList.add(yerlestirilecekKisEngeli);

                    break;
                }
            }
        }

        for (HareketsizEngelKis hareketsizEngelKis : hareketsizEngelKisArrayList){

            Image imageKisEngel = new Image(hareketsizEngelKis.getImagePath() + hareketsizEngelKis.getAd());
            ImageView imageView = new ImageView(imageKisEngel);
            imageView.setFitWidth(KARE_BOYUTU * hareketsizEngelKis.getEngelGenislik());
            imageView.setFitHeight(KARE_BOYUTU * hareketsizEngelKis.getEngelBoy());
            imageView.setX(hareketsizEngelKis.getEngelX() * KARE_BOYUTU);
            imageView.setY(hareketsizEngelKis.getEngelY() * KARE_BOYUTU);

            hareketsizEngelKisImageViews.add(imageView);
            root.getChildren().add(imageView);
        }
    }
}

package org.efs.demo;

public class HareketsizEngel extends Engel {

    public HareketsizEngel(String imagePath, String ad, int engelX, int engelY, int engelBoy, int engelGenislik) {
        super(imagePath, ad, engelX, engelY, engelBoy, engelGenislik);
    }

}

package org.efs.demo;
import javafx.animation.TranslateTransition;
import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.util.Duration;
import java.util.*;
import static org.efs.demo.HelloApplication.*;


public class HareketliEngel extends Engel {
    private String hareketYonu;
    private int hareketBoyutu;

    public HareketliEngel(String imagePath, String ad, int engelX, int engelY, int engelBoy, int engelGenislik, String hareketYonu, int hareketBoyutu) {
        super(imagePath, ad, engelX, engelY, engelBoy, engelGenislik);
        this.setHareketYonu(hareketYonu);
        this.setHareketBoyutu(hareketBoyutu);
    }

    static Engel kus = new HareketliEngel("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Hareketli Engeller/",
            "kus.png", 0, 0, 2, 2, "Y", 5);
    static Engel ari = new HareketliEngel("file:///C:/BEN/Kodlar/Proje/Proje_9_Uni_ProLab2_1/a_png/Hareketli Engeller/",
            "ari.png", 0, 0, 2, 2, "X", 5);
    static Engel[] hareketliEngeller = {kus, ari};
    private static List<HareketliEngel> hareketliEngelArrayList = new ArrayList<>();
    private static List<ImageView> hareketliEngelImageViews = new ArrayList<>();
    public static void hareketliEngelOlustur(Lokasyon lokasyon, Group root) throws CloneNotSupportedException {

        root.getChildren().removeAll(hareketliEngelImageViews);
        hareketliEngelImageViews.clear();
        hareketliEngelArrayList.clear();

        for (int i = 0; i < hareketliEngelSayi; i++) {
            int kontrol;

            while (true) {

                Random random = new Random();
                int a = random.nextInt(hareketliEngeller.length);
                HareketliEngel yerlestirilecekHareketliEngel = (HareketliEngel) hareketliEngeller[a].clone();

                int engelX;
                int engelY;

                do {

                    engelX = random.nextInt(KARE_GENISLIK);

                } while (!(engelX - yerlestirilecekHareketliEngel.getHareketBoyutu() > 0 &&
                        KARE_GENISLIK - engelX > yerlestirilecekHareketliEngel.getHareketBoyutu() + yerlestirilecekHareketliEngel.getEngelGenislik()));

                do {

                    engelY = random.nextInt(KARE_YUKSEKLIK);

                } while (!(engelY - yerlestirilecekHareketliEngel.getHareketBoyutu() > 0
                        && engelY + yerlestirilecekHareketliEngel.getHareketBoyutu() + yerlestirilecekHareketliEngel.getEngelBoy() < KARE_YUKSEKLIK));


                if (yerlestirilecekHareketliEngel.getHareketYonu().equals("X")) {
                    int x1 = engelX - yerlestirilecekHareketliEngel.getHareketBoyutu();
                    int x2 = engelX + yerlestirilecekHareketliEngel.getHareketBoyutu() + yerlestirilecekHareketliEngel.getEngelGenislik() - 1;
                    int x3 = engelX + yerlestirilecekHareketliEngel.getHareketBoyutu() + yerlestirilecekHareketliEngel.getEngelGenislik() - 1;
                    int x4 = engelX - yerlestirilecekHareketliEngel.getHareketBoyutu();

                    int y1 = engelY;
                    int y2 = engelY;
                    int y3 = engelY + yerlestirilecekHareketliEngel.getEngelBoy() - 1;
                    int y4 = engelY + yerlestirilecekHareketliEngel.getEngelBoy() - 1;

                    kontrol = lokasyon.Kontrol(x1, x2, x3, x4, y1, y2, y3, y4); // 1 ise devam -1 ise başa dön
                } else {

                    int x1 = engelX;
                    int x2 = engelX + yerlestirilecekHareketliEngel.getEngelGenislik() - 1;
                    int x3 = engelX + yerlestirilecekHareketliEngel.getEngelGenislik() - 1;
                    int x4 = engelX;

                    int y1 = engelY - yerlestirilecekHareketliEngel.getHareketBoyutu();
                    int y2 = engelY - yerlestirilecekHareketliEngel.getHareketBoyutu();
                    int y3 = engelY + yerlestirilecekHareketliEngel.getHareketBoyutu() + yerlestirilecekHareketliEngel.getEngelBoy() - 1;
                    int y4 = engelY + yerlestirilecekHareketliEngel.getHareketBoyutu() + yerlestirilecekHareketliEngel.getEngelBoy() - 1;

                    kontrol = lokasyon.Kontrol(x1, x2, x3, x4, y1, y2, y3, y4); // 1 ise devam -1 ise başa dön


                }

                if (kontrol == 1) {

                    yerlestirilecekHareketliEngel.setEngelX(engelX);
                    yerlestirilecekHareketliEngel.setEngelY(engelY);

                    lokasyon.HareketliEngelKordinatYaz(yerlestirilecekHareketliEngel.getEngelBoy(), yerlestirilecekHareketliEngel.getEngelGenislik()
                            , yerlestirilecekHareketliEngel.getEngelX() + 1, yerlestirilecekHareketliEngel.getEngelY() + 1,
                            yerlestirilecekHareketliEngel.getHareketBoyutu(), yerlestirilecekHareketliEngel.getHareketYonu());

                    hareketliEngelArrayList.add(yerlestirilecekHareketliEngel);
                    engelArrayList.add(yerlestirilecekHareketliEngel);

                    break;
                }
            }

        }

        for (HareketliEngel hareketliEngel : hareketliEngelArrayList) {
            Image imageHareketliEngel = new Image(hareketliEngel.getImagePath() + hareketliEngel.getAd());
            ImageView imageView = new ImageView(imageHareketliEngel);
            imageView.setId(hareketliEngel.getAd());

            imageView.setFitWidth(KARE_BOYUTU * hareketliEngel.getEngelGenislik());
            imageView.setFitHeight(KARE_BOYUTU * hareketliEngel.getEngelBoy());
            imageView.setX(hareketliEngel.getEngelX() * KARE_BOYUTU);
            imageView.setY(hareketliEngel.getEngelY() * KARE_BOYUTU);

            hareketliEngelImageViews.add(imageView);

            root.getChildren().add(imageView);
        }
    }


    public static void hareketEttir() {

        for (ImageView imageView : hareketliEngelImageViews) {

            for (HareketliEngel hareketliEngel : hareketliEngelArrayList) {
                if (imageView.getId().equals(hareketliEngel.getAd())) {
                    switch (hareketliEngel.hareketYonu) {
                        case "Y":

                            TranslateTransition yukariHareket = new TranslateTransition(Duration.seconds(1), imageView);
                            yukariHareket.setByY(hareketliEngel.hareketBoyutu*KARE_BOYUTU);
                            yukariHareket.setAutoReverse(true);
                            yukariHareket.setCycleCount(TranslateTransition.INDEFINITE);

                            TranslateTransition asagiHareket = new TranslateTransition(Duration.seconds(1), imageView);
                            asagiHareket.setByY(-hareketliEngel.hareketBoyutu*KARE_BOYUTU);
                            asagiHareket.setAutoReverse(true);
                            asagiHareket.setCycleCount(TranslateTransition.INDEFINITE);

                            yukariHareket.play();
                            asagiHareket.play();

                            break;

                        case "X":

                            TranslateTransition sagaHareket = new TranslateTransition(Duration.seconds(1), imageView);
                            sagaHareket.setByX(hareketliEngel.hareketBoyutu*KARE_BOYUTU);
                            sagaHareket.setAutoReverse(true);
                            sagaHareket.setCycleCount(TranslateTransition.INDEFINITE);

                            TranslateTransition solaHareket = new TranslateTransition(Duration.seconds(1), imageView);
                            solaHareket.setByX(-hareketliEngel.hareketBoyutu*KARE_BOYUTU);
                            solaHareket.setAutoReverse(true);
                            solaHareket.setCycleCount(TranslateTransition.INDEFINITE);


                            sagaHareket.play();
                            solaHareket.play();

                            break;
                    }
                }
            }
        }
    }

    public String getHareketYonu() {
        return hareketYonu;
    }

    public void setHareketYonu(String hareketYonu) {
        this.hareketYonu = hareketYonu;
    }

    public int getHareketBoyutu() {
        return hareketBoyutu;
    }

    public void setHareketBoyutu(int hareketBoyutu) {
        this.hareketBoyutu = hareketBoyutu;
    }
}

package org.efs.demo;

import java.util.ArrayList;

public class Engel implements Cloneable {

    private String ad;
    private String imagePath;
    private int engelX;
    private int engelY;
    private int engelBoy;
    private int engelGenislik;
    static ArrayList<Engel> engelArrayList = new ArrayList<>();

    public Engel(String imagePath,String ad, int engelX, int engelY, int engelBoy, int engelGenislik) {
        this.setEngelX(engelX);
        this.setEngelY(engelY);
        this.setEngelBoy(engelBoy);
        this.setEngelGenislik(engelGenislik);
        this.setAd(ad);
        this.setImagePath(imagePath);
    }

    public int getEngelX() {
        return engelX;
    }

    public void setEngelX(int engelX) {
        this.engelX = engelX;
    }

    public int getEngelY() {
        return engelY;
    }

    public void setEngelY(int engelY) {
        this.engelY = engelY;
    }


    public String getImagePath() {
        return imagePath;
    }

    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }

    public String getAd() {
        return ad;
    }

    public void setAd(String ad) {
        this.ad = ad;
    }

    public int getEngelBoy() {return engelBoy;}

    public void setEngelBoy(int engelBoy) {
        this.engelBoy = engelBoy;
    }

    public int getEngelGenislik() {
        return engelGenislik;
    }

    public void setEngelGenislik(int engelGenislik) {
        this.engelGenislik = engelGenislik;
    }

    protected Engel clone() throws CloneNotSupportedException {
        try {
            return (Engel) super.clone();
        } catch (CloneNotSupportedException e) {
            return null;
        }
    }
}












